@page "/order/{orderId:int}"
@inject IOrderService orderService
@inject IUserService userService
@attribute [Authorize(Roles = "Administrator,Manager")]


<div class="container-fluid">
    <div class="row h2 border rounded p-2 bg-dark text-white">
        <div class="col">
            ID: @order.Id
        </div>
        <div class="col">
            Order data: @order.OrderData
        </div>
    </div>
    <br />
    <div class="row h3 p-2 border rounded">
        <div class="col">
            Client: @order.NameClient
        </div>
        <div class="col">
            Client Id:@order.ClientId
        </div>
    </div>
    <br />
    <div class="row p-2 border rounded">
        <EditForm Model="@order" OnValidSubmit="@ChangeDescriptionAndStatusOrder">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <br />
            <div >
                Description:
                <InputTextArea class="form-control" rows="3" @bind-Value="@order.Description" />
            </div>
            <br />
            <div>
                Status:
                <InputSelect class="form-control" @bind-Value="@order.OrderStatus">
                    <option value="@OrderStatus.New">New</option>
                    <option value="@OrderStatus.Done">Done</option>
                </InputSelect>
            </div>
            <br />
            <button class="btn btn-success" type="submit">Save</button>
        </EditForm>
        <br />
    </div>
    <br />
    <div class="row p-1 border-top">
        <h3>Cost: @order.Cost.ToString("C0",CultureInfo.CreateSpecificCulture("en-US"))</h3>
    </div>
    @if (historyOrder.Count() > 0 || historyOrder != null)
    {
        <div>
            <button @onclick="(()=>ShowHistoryOfChange())" class="btn btn-primary" type="button">
                History of changes
            </button>
            <div hidden="@isShowHistoryOfChanges" class="p-3">
                <TableComponent Items="historyOrder" Context="change">
                    <TableHeader>
                        <th>Date of change</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>User Name</th>
                    </TableHeader>
                    <RowTemplate>
                        <td>@change.DateOfChange</td>
                        <td>@change.Description</td>
                        <td>@change.OrderStatus</td>
                        <td>@change.UserName</td>
                    </RowTemplate>
                </TableComponent>
            </div>
        </div>
    }
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    [Parameter]
    public int OrderId { get; set; }
    private List<HistoryOrderViewModel>? historyOrder;
    private UserViewModel? currentUser;
    private OrderViewModel order;
    private bool isShowHistoryOfChanges { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        order = orderService.GetById(OrderId);
        historyOrder = orderService.GetHistoryOrder(order.Id);
    }
    private void ChangeDescriptionAndStatusOrder()
    {
        order.NameUserMadeChangeOrder = currentUser.Name;
        orderService.Save(order);
        OnInitializedAsync();
    }

    private async Task GetCurrentUser()
    {
        var authState = await authenticationState;
        var authUserName = authState.User.Identity.Name;
        currentUser = userService.GetByUserName(authUserName);
    }

    private void ShowHistoryOfChange()
    {
        isShowHistoryOfChanges = !isShowHistoryOfChanges;
    }
}
