@page "/allClients/{clientId:int}"
@inject BlazorTestApp.DAL.Repositories.IBaseRepository<Client> clientRepository
@inject BlazorTestApp.DAL.Repositories.IBaseRepository<Order> orderRepository

@using BlazorTestApp.DAL.DbModels;
<div class="container-fluid">
    <div class="row">
        <div class="col bg-dark text-white text-center">
            <h2>@_client.FirstName  @_client.LastName</h2>
        </div>
    </div>
    <div class="row">
        <span>Description</span>
        <div class="col">
            @_client.Description
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h3>Orders</h3>
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Id Order</th>
                        <th scope="col">Description</th>
                        <th scope="col">OrderData</th>
                        <th scope="col">OrderStatus</th>
                        <th scope="col">Cost</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                @foreach (var item in _client.Orders)
                {
                    <tbody>
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Description</td>
                            <td>@item.OrderData</td>
                            <td>@item.OrderStatus</td>
                            <td>@item.Cost</td>
                            <td><button class="btn btn-info">Edit</button></td>
                            <td> <button class="btn btn-danger" @onclick="(()=>DeleteOrder(item))">Delete</button> </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>
@code {
    [Parameter] public int ClientId { get; set; }
    private Client _client;

    protected override void OnInitialized()
    {
        _client = new Client();
        _client = clientRepository.GetAll().FirstOrDefault(x=>x.Id==ClientId);
    }
    private void DeleteOrder(Order order)
    {
        orderRepository.Delete(order);
    }
}
