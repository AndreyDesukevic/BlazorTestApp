@inject IClientService clientService
@inject IUserService userService
@page "/allClients"

<MessageComponent Message="@messageForPopUp" @ref="messageComponent"></MessageComponent>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h2> All clients</h2>
            <TableComponent Items="clients.ToList()" Context="client">
                <TableHeader>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Create Data</th>
                    <th>Status</th>
                    <th></th>
                </TableHeader>
                <RowTemplate>
                    <td>@client.Id</td>
                    <td><a href="/client/@client.Id"> @client.Name</a></td>
                    <td>@client.Description</td>
                    <td>@client.DateCreate</td>
                    <td>@client.ClientStatus</td>
                    <td><button class="btn btn-danger" disabled="@client.CannotDeleted" @onclick="(()=>DeleteClient(client.Id,currentUser.Name))">Delete Client</button></td>
                </RowTemplate>
            </TableComponent>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private MessageComponent? messageComponent;
    private string? messageForPopUp;
    private IEnumerable<ClientViewModel> clients = new List<ClientViewModel>();
    private UserViewModel? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        clients = clientService.GetAll();
       
    }

    private void DeleteClient(int idClient, string nameCurrentUser)
    {
        if (clientService.Delete(idClient,nameCurrentUser))
        {
            messageForPopUp = "Client has been removed";
            messageComponent?.Show();
        }
        else
        {
            messageForPopUp = "Client can't be deleted. He has ordered.";
            messageComponent?.Show();
        }
    }

    private async Task GetCurrentUser()
    {
        var authState = await authenticationState;
        var authUserName = authState.User.Identity.Name;
        currentUser = userService.GetByUserName(authUserName);
    }

}