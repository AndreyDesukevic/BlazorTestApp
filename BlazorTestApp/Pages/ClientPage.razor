@page "/client/{clientId:int}"
@inject IOrderService orderService
@inject IClientService clientService
@inject IUserService userService
@attribute [Authorize(Roles = "Administrator,Manager")]

@using BlazorTestApp.DAL.DbModels;
<div class="container-fluid">
    <br />
    <div class="row">
        <div class="col p-2 bg-dark text-white text-center border rounded-top">
            <h2>@client.Name</h2>
        </div>
    </div>
    <EditForm Model="@client" OnValidSubmit="@ChangeDescriptionAndStatusClient">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row border rounded">
            <div class="col p-3">
                <div>
                    Description:
                </div>
                <div>
                    <InputTextArea class="form-control" rows="3" @bind-Value="@client.Description" />
                </div>
            </div>
            <div class="col p-3 border-left">
                <div>
                    Create Data: @client.DateCreate
                </div>
                <div>
                    Status:
                    <InputSelect class="form-control" @bind-Value="@client.ClientStatus">
                        <option value="@ClientStatus.Potential">Potential</option>
                        <option value="@ClientStatus.Active">Active</option>
                        <option disabled="@client.CannotBeNotActive" value="@ClientStatus.NotActive">Not active</option>
                    </InputSelect>
                </div>
            </div>
            <div class="p-3">
                <button class="btn btn-success" type="submit">Save</button>
            </div>
        </div>
    </EditForm>
    <br />
    @if (historyClient.Count()>0||historyClient!=null)
    {
        <div>
            <button @onclick="(()=>ShowHistoryOfChange())" class="btn btn-primary" type="button">
                History of changes
            </button>
            <div hidden="@isShowHistoryOfChanges" class="p-3">
                <TableComponent Items="historyClient" Context="change">
                    <TableHeader>
                        <th>Date of change</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>User Name</th>
                    </TableHeader>
                    <RowTemplate>
                        <td>@change.DateOfChange</td>
                        <td>@change.Description</td>
                        <td>@change.ClientStatus</td>
                        <td>@change.UserName</td>
                    </RowTemplate>
                </TableComponent>
            </div>
        </div>
    }
    @if (client.ClientStatus == ClientStatus.Active)
    {
        <div class="row border rounded">
            <div class="p-3">
                <EditForm Model="@orderCreate" OnValidSubmit="@CreateOrder">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <ImputComponent Label="Description">
                        <Control>
                            <input type="text" @bind-value="orderCreate.Description" placeholder="Description" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm">
                        </Control>
                    </ImputComponent>
                    <ImputComponent Label="Cost">
                        <Control>
                            <input type="text" @bind-value="orderCreate.Cost" placeholder="Cost" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm">
                        </Control>
                    </ImputComponent>
                    <button class="btn btn-success" type="submit">Add</button>
                </EditForm>
            </div>
        </div>
        @if (orders.Count() > 0)
        {
            <div class="row">
                <div class="text-center">
                    <h3>Orders:</h3>
                </div>
                <div>
                    <TableComponent Items="orders.ToList()" Context="order">
                        <TableHeader>
                            <th>Id Order</th>
                            <th>Description</th>
                            <th>Order Data</th>
                            <th>Order Status</th>
                            <th>Cost</th>
                            <th></th>
                            <th></th>
                        </TableHeader>
                        <RowTemplate>
                            <td><a href="/order/@order.Id"> @order.Id</a></td>
                            <td>@order.Description</td>
                            <td>@order.OrderData</td>
                            <td>@order.OrderStatus</td>
                            <td>@order.Cost.ToString("C0",CultureInfo.CreateSpecificCulture("en-US"))</td>
                            <td><button class="btn btn-danger" disabled="@order.CannotDeleted" @onclick="(()=>DeleteOrder(order.Id,currentUser.Name))">Delete</button></td>
                        </RowTemplate>
                    </TableComponent>
                </div>
            </div>
        }
        else
        {
            <div class="row p-3 text-center">
                <h3>No orders</h3>
            </div>
        }
    }
    else
    {
        <div>
            <h2>Order can be created for clients in active status.</h2>
        </div>
    }
</div>


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public int ClientId { get; set; }

    private ClientViewModel? client;
    private List<HistoryClientViewModel>? historyClient;
    private IEnumerable<OrderViewModel>? orders;
    private OrderCreateViewModel? orderCreate;
    private UserViewModel? currentUser;
    private bool isShowHistoryOfChanges { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        client = clientService.GetById(ClientId);
        orderCreate = new OrderCreateViewModel();
        orders = orderService.GetListOrdersById(client.OrdersId);
        historyClient = clientService.GetHistoryClient(client.Id);
    }

    private async Task GetCurrentUser()
    {
        var authState = await authenticationState;
        var authUserName = authState.User.Identity.Name;
        currentUser = userService.GetByUserName(authUserName);
    }

    private void DeleteOrder(int idOrder,string currentUserName)
    {
        orderService.Delete(idOrder,currentUserName);
    }

    private async Task CreateOrder()
    {
        orderCreate.ClientId = client.Id;
        orderCreate.NameUserMadeChangeOrder = currentUser.Name;
        orderService.Create(orderCreate);
        await OnInitializedAsync();
    }

    private void ChangeDescriptionAndStatusClient()
    {
        client.NameUserMadeChange = currentUser.Name;
        clientService.Save(client);
        OnInitializedAsync();
    }

    private void ShowHistoryOfChange()
    {
        isShowHistoryOfChanges = !isShowHistoryOfChanges;
    }
}
