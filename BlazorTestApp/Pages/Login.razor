@page "/login"
@inject IUserService userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-4">
            <label>User Name</label>
            <input @bind="userLogin.Name" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="userLogin.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate"  class="btn btn-primary">Login</button>
        </div>
        <div class="mb-1 text-center">
            <a href="/registration">Registration</a>
        </div>
    </div>

</div>


@code {
    private UserLoginViewModel userLogin = new UserLoginViewModel();

    private async Task Authenticate()
    {
        var user = userService.GetByUserName(userLogin.Name);
        var hashPassword = HashPasswordHelper.HashPassword(userLogin.Password);
        if(user==null|| user.Password!=hashPassword)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationStateAsync(new UserSession
            {
                UserName = user.Name,
                Role = user.Role.ToString()
            });
        navManager.NavigateTo("/", true);
    }
}


